// Generated by gencpp from file Zad1/MoveRequest.msg
// DO NOT EDIT!


#ifndef ZAD1_MESSAGE_MOVEREQUEST_H
#define ZAD1_MESSAGE_MOVEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <Zad1/Data.h>

namespace Zad1
{
template <class ContainerAllocator>
struct MoveRequest_
{
  typedef MoveRequest_<ContainerAllocator> Type;

  MoveRequest_()
    : data()
    , positions()  {
    }
  MoveRequest_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , positions(_alloc)  {
  (void)_alloc;
    }



   typedef  ::Zad1::Data_<ContainerAllocator>  _data_type;
  _data_type data;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _positions_type;
  _positions_type positions;





  typedef boost::shared_ptr< ::Zad1::MoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Zad1::MoveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveRequest_

typedef ::Zad1::MoveRequest_<std::allocator<void> > MoveRequest;

typedef boost::shared_ptr< ::Zad1::MoveRequest > MoveRequestPtr;
typedef boost::shared_ptr< ::Zad1::MoveRequest const> MoveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Zad1::MoveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Zad1::MoveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Zad1::MoveRequest_<ContainerAllocator1> & lhs, const ::Zad1::MoveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.positions == rhs.positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Zad1::MoveRequest_<ContainerAllocator1> & lhs, const ::Zad1::MoveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Zad1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Zad1::MoveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Zad1::MoveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Zad1::MoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Zad1::MoveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Zad1::MoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Zad1::MoveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Zad1::MoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a050bb6eb78515fa0103ef6c5cb3ffe";
  }

  static const char* value(const ::Zad1::MoveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a050bb6eb78515fULL;
  static const uint64_t static_value2 = 0xa0103ef6c5cb3ffeULL;
};

template<class ContainerAllocator>
struct DataType< ::Zad1::MoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Zad1/MoveRequest";
  }

  static const char* value(const ::Zad1::MoveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Zad1::MoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Zad1/Data data\n"
"float64[] positions\n"
"\n"
"================================================================================\n"
"MSG: Zad1/Data\n"
"string name\n"
"float64 velocity\n"
;
  }

  static const char* value(const ::Zad1::MoveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Zad1::MoveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Zad1::MoveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Zad1::MoveRequest_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::Zad1::Data_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZAD1_MESSAGE_MOVEREQUEST_H
